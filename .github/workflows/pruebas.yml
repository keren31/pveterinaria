name: PWA CI/CD Workflow

# Disparadores para el workflow pruebas en la rama de pruebas 
on:
  push:
    branches:
      - '*'    # Ejecutar las pruebas en cualquier rama en cada push
  pull_request:
    branches:
      - main   # Ejecutar las pruebas antes de fusionar a main
  workflow_dispatch:

# Permisos para GitHub Actions
permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Configurar Node.js (para recat y Jest)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Versión de Node.js recomendada
          cache: 'npm'  # Configura el caché para npm automáticamente

      # Instalación de dependencias
      - name: Install dependencies
        run: npm ci
        working-directory: ./pveterinaria

      # analizar el código con ESLint o TSLint
      - name: Run linter (ESLint/TSLint)
        run: npm run lint
        working-directory: ./pveterinaria
      
      # Compilar el proyecto React (npm run build)
      - name: Build React Project
        working-directory: ./pveterinaria
        run: npm run build --if-present
      
      # Ejecutar pruebas unitarias con Jest
      - name: Run unit test Jest tests
        working-directory: ./pveterinaria
        run: npm run test -- --ci --watchAll=false --coverage

      # Levantar la aplicación de React y esperar a que esté lista
      - name: Start React App
        working-directory: ./pveterinaria
        run: |
          npm start --port 3000 &
          npx wait-on http://localhost:3000

      # Ejecutar pruebas e2e con cypress
      - name: e2e cypress
        working-directory: ./pveterinaria
        run: npx cypress run

       # Almacenar el informe de cobertura (siempre)
      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./pveterinaria/coverage/ # Ajusta esta ruta si tu informe de cobertura se genera en un lugar diferente

  
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test   # Asegura que este job solo se ejecuta si 'test' ha sido exitoso
    if: github.ref == 'refs/heads/main'  # Asegura que solo se ejecute en la rama main

    steps:
      # Checkout del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Desplegar la aplicación a producción
      - name: Deploy to Production Vercel
        run: |
          echo "Desplegando aplicación de la estetica canina a producción..."
          npx vercel --prod --token ${{ secrets.TOKEN_Vercel }}    